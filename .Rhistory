layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_dropout(0.25) %>%#flatten the input
layer_flatten() %>%  layer_dense(512) %>%
layer_activation("relu") %>%
layer_dropout(0.5) %>%  #output layer-10 classes-10 units
layer_dense(10) %>%
#applying softmax nonlinear activation function to the output layer #to calculate cross-entropy
layer_activation("softmax")
#for computing Probabilities of classes-"logit(log probabilities)
#Model's Optimizer#defining the type of optimizer-ADAM-Adaptive Momentum Estimation
opt<-optimizer_adam( lr= 0.0001 , decay = 1e-6 )#lr-learning rate , decay - learning rate decay over each update
model %>%
compile(loss="categorical_crossentropy",
optimizer=opt,metrics = "accuracy")
#Summary of the Model and its Architecture
summary(model)
data_augmentation <- TRUE
if(!data_augmentation) {
model %>% fit( train_x,train_y ,batch_size=32,
epochs=80,validation_data = list(test_x, test_y),
shuffle=TRUE)
} else {  #Generating images
gen_images <- image_data_generator(featurewise_center = TRUE,
featurewise_std_normalization = TRUE,
rotation_range = 20,
width_shift_range = 0.30,
height_shift_range = 0.30,
horizontal_flip = TRUE  )#Fit image data generator internal statistics to some sample data
gen_images %>% fit_image_data_generator(train_x)
#Generates batches of augmented/normalized data from image data and #labels to visually see the generated images by the Model
model %>% fit_generator(
flow_images_from_data(train_x, train_y,gen_images,
batch_size=32),
steps_per_epoch=as.integer(50000/32),epochs = 80,
validation_data = list(test_x, test_y) )}
library(keras)
library(tensorflow)
cifar<-dataset_cifar10()
test_x<-cifar$test$x/255
typeof(test_x[1])
cifar<-dataset_cifar10()
test_x<-cifar$test$x/255
typeof(test_x[1])
fit_image_data_generator(test_x[1])
cifar<-dataset_cifar10()
new_model <- load_model_hdf5("resnet.h5")
new_model %>% summary()
test_x<-cifar$test$x/255
x<-test_x[1]
new_model %>% predict(x)
new_model <- load_model_hdf5("resnet.h5")
new_model %>% summary()
test_x<-cifar$test$x/255
x<-test_x[1]
new_model %>% predict(text_x)
new_model <- load_model_hdf5("resnet.h5")
new_model %>% summary()
img <- image_load("_0_112", target_size = c(150,150))
new_model <- load_model_hdf5("resnet.h5")
#new_model %>% summary()
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
dim(img_tensor)
new_model %>% predict_classes(img_tensor)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
dim(img_tensor)
new_model %>% predict_classes(img_tensor)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
dim(img_tensor)
#new_model %>% predict_classes(img_tensor)
new_model %>% predict(img_tensor)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
test_x<-cifar$test$x/255
test_x[1][1]
dim(img_tensor)
#new_model %>% predict_classes(img_tensor)
new_model %>% predict(img_tensor)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
test_x<-cifar$test$x/255
test_x[1]
dim(img_tensor)
#new_model %>% predict_classes(img_tensor)
new_model %>% predict(img_tensor)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
test_x<-cifar$test$x/255
test_x[1][2]
dim(img_tensor)
#new_model %>% predict_classes(img_tensor)
new_model %>% predict(img_tensor)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
test_x<-cifar$test$x/255
test_x[1][3]
dim(img_tensor)
#new_model %>% predict_classes(img_tensor)
new_model %>% predict(img_tensor)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
test_x<-cifar$test$x/255
test_x[1][1]
dim(img_tensor)
#new_model %>% predict_classes(img_tensor)
new_model %>% predict(img_tensor)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
test_x<-cifar$test$x/255
test_x[2][1]
dim(img_tensor)
#new_model %>% predict_classes(img_tensor)
new_model %>% predict(img_tensor)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
plot_pnt(test_x[1])
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
plot_png(test_x[1])
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
im<-readPNG(test_x[1])
library(keras)
library(tensorflow)
library(png)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
im<-readPNG(test_x[1])
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
im<-readPNG(test_x[1])
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
new_model %>% predict(test_x[1])
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
new_model %>% predict(test_x)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
#new_model %>% predict(test_x)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[1][5][5][2])
#new_model %>% predict(test_x)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[[1]])
#new_model %>% predict(test_x)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[[2]])
#new_model %>% predict(test_x)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[[3]])
#new_model %>% predict(test_x)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[[4]])
#new_model %>% predict(test_x)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[[5]])
#new_model %>% predict(test_x)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[1,5,5,1])
#new_model %>% predict(test_x)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[1,5,5,1])
print(test_x[1,5,5,2])
print(test_x[1,5,5,3])
#new_model %>% predict(test_x)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[1,5,5,1])
print(test_x[1,5,5,2])
print(test_x[1,5,5,3])
new_model %>% predict(test_x[[1]])
new_model %>% predict(test_x[1,1:32,1:32,1:3])
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[1,5,5,1])
print(test_x[1,5,5,2])
print(test_x[1,5,5,3])
new_model %>% predict(test_x[1,1:32,1:32,1:3])
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[1,5,5,1])
print(test_x[1,5,5,2])
print(test_x[1,5,5,3])
new_model %>% predict(test_x[1:1,1:32,1:32,1:3])
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[1,5,5,1])
print(test_x[1,5,5,2])
print(test_x[1,5,5,3])
new_model %>% predict(test_x[1:2,1:32,1:32,1:3])
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[1,5,5,1])
print(test_x[1,5,5,2])
print(test_x[1,5,5,3])
new_model %>% evaluate(test_x[1:2,1:32,1:32,1:3])
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[1,5,5,1])
print(test_x[1,5,5,2])
print(test_x[1,5,5,3])
new_model %>% evaluate(test_x[1,1:32,1:32,1:3])
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[1,5,5,1])
print(test_x[1,5,5,2])
print(test_x[1,5,5,3])
new_model %>% evaluate(test_x[1:5,1:32,1:32,1:3])
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[1,5,5,1])
print(test_x[1,5,5,2])
print(test_x[1,5,5,3])
new_model %>% evaluate(test_x[1:2,1:32,1:32,1:3])
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[1,5,5,1])
print(test_x[1,5,5,2])
print(test_x[1,5,5,3])
new_model %>% evaluate(test_x)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[1,5,5,1])
print(test_x[1,5,5,2])
print(test_x[1,5,5,3])
new_model %>% evaluate(test_x, steps=30)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[1,5,5,1])
print(test_x[1,5,5,2])
print(test_x[1,5,5,3])
new_model %>% evaluate(test_x, steps=10)
img <- image_load("_0_112.png", target_size = c(150,150))
img_tensor <- image_to_array(img)
img_tensor <- array_reshape(img_tensor, c(1, 150, 150, 3))
img_tensor <- img_tensor / 255
#im<-readPNG(test_x[1])
print(test_x[1][5][5][1])
print(test_x[1,5,5,1])
print(test_x[1,5,5,2])
print(test_x[1,5,5,3])
#new_model %>% evaluate(t)
new_model %>% evaluate(test_x[1:2,1:32,1:32,1:3], batch_size = 32)
shiny::runApp('School/Scientific programming in R/Final_Project/test123')
runApp('School/Scientific programming in R/Final_Project/txtBox')
shiny::runApp('School/Scientific programming in R/Final_Project/txtBox')
runApp('School/Scientific programming in R/Final_Project/txtBox')
runApp('School/Scientific programming in R/Final_Project/txtBox')
runApp('School/Scientific programming in R/Final_Project/txtBox')
runApp('School/Scientific programming in R/Final_Project/txtBox')
runApp('School/Scientific programming in R/Final_Project/txtBox')
runApp('School/Scientific programming in R/Final_Project/txtBox')
runApp('School/Scientific programming in R/Final_Project/txtBox')
runApp('School/Scientific programming in R/Final_Project/txtBox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/new_textbox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
runApp('School/Scientific programming in R/Final_Project/working pixel select - Copy/txtBox')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('~/School/Scientific programming in R/Final_Project/new_textbox')
runApp()
runApp()
harmonicMean<-function(x){
sum<-0
#sum every value of the array
for(numb in x){
sum<-sum + numb^-1
}
#didive sum by the length
sum<-sum/length(x)
#raise to the -1 power
sum<-sum^-1
return(sum)
}
x<-(c(1,2,-3))
harmonicMean(x)
runApp('~/School/Scientific programming in R/Final_Project/new_textbox')
runApp()
runApp('~/School/Scientific programming in R/Final_Project/new_textbox')
runApp('~/School/Scientific programming in R/Final_Project/new_textbox')
runApp('~/School/Scientific programming in R/Final_Project/new_textbox')
runApp('~/School/Scientific programming in R/Final_Project/new_textbox')
runApp('~/School/Scientific programming in R/Final_Project/new_textbox')
runApp('~/School/Scientific programming in R/Final_Project/new_textbox')
runApp('~/School/Scientific programming in R/Final_Project/new_textbox')
runApp('~/School/Scientific programming in R/Final_Project/new_textbox')
runApp('~/School/Scientific programming in R/Final_Project/new_textbox')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
